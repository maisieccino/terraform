- hosts: all
  remote_user: ubuntu
  become: true
  vars:
    domain_name: fly.mbell.me
    letsencrypt_email: '{{ lookup("env", "LE_EMAIL") }}'
    gh_client_id: '{{ lookup("env", "GH_CLIENT_ID") }}'
    gh_client_secret: '{{ lookup("env", "GH_CLIENT_SECRET") }}'

  tasks:
    - name: Prerequisites are present
      apt:
        name: "{{item}}"
        state: present
        cache_valid_time: 7200
      with_items:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - nginx
        - python3
        - python3-pip
    - name: docker-py is installed
      pip: name=docker-py
    - name: add Docker GPG key
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg
    - name: add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable
    - name: Ensure docker-ce is installed
      apt: name=docker-ce
    - name: Ensure dockerd is started
      service:
        name: docker
        state: started

    # setup letsencrypt
    - name: install letsencrypt
      apt: name=letsencrypt state=latest
    - name: create letsencrypt directory
      file: name=/var/www/letsencrypt state=directory
    - name: Remove default nginx config
      file: name=/etc/nginx/sites-enabled/default state=absent
    - name: Install system nginx config
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/nginx.conf
    - name: Install nginx site for letsencrypt requests
      template:
        src: templates/nginx-concourse.j2
        dest: /etc/nginx/sites-enabled/concourse
    - name: Reload nginx to activate letsencrypt site
      service: name=nginx state=restarted
    - name: Create letsencrypt certificate
      shell: letsencrypt certonly -n --webroot -w /var/www/letsencrypt -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }}
      args:
        creates: /etc/letsencrypt/live/{{ domain_name }}
    - name: Generate dhparams
      shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
      args:
        creates: /etc/nginx/dhparams.pem
    - name: Install nginx site for specified site
      template:
        src: templates/nginx-le.j2
        dest: /etc/nginx/sites-enabled/le
    - name: Reload nginx to activate specified site
      service: name=nginx state=restarted
    - name: Add letsencrypt cronjob for cert renewal
      cron:
        name: letsencrypt_renewal
        special_time: weekly
        job: letsencrypt --renew certonly -n --webroot -w /var/www/letsencrypt -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }} && service nginx reload

    # start concourse
    - name: Concourse is running
      docker_container:
        name: concourse
        command: quickstart
        image: concourse/concourse:4.0.0
        state: started
        privileged: yes
        ports:
          - "8080:8080"
        volumes:
          - "/home/ubuntu/.postgresql:/home/ubuntu/.postgresql"
        env:
          # CONCOURSE_POSTGRES_DATA_SOURCE: '{{lookup("env","PG_CONN_STRING")}}'
          CONCOURSE_POSTGRES_HOST: '{{lookup("env", "PG_HOST")}}'
          CONCOURSE_POSTGRES_USER: '{{lookup("env", "PG_USER")}}'
          CONCOURSE_POSTGRES_PASSWORD: '{{lookup("env", "PG_PASS")}}'
          CONCOURSE_POSTGRES_DATABASE: '{{lookup("env", "PG_DBNAME")}}'
          CONCOURSE_POSTGRES_SSLMODE: verify-all
          CONCOURSE_POSTGRES_CA_CERT: "/home/ubuntu/.postgresql/root.crt"
          CONCOURSE_POSTGRES_CLIENT_CERT: "/home/ubuntu/.postgresql/client-cert.pem"
          CONCOURSE_POSTGRES_CLIENT_KEY: "/home/ubuntu/.postgresql/client-key.pem"
          CONCOURSE_EXTERNAL_URL: "https://fly.mbell.me"
          CONCOURSE_GITHUB_CLIENT_ID: "{{ gh_client_id }}"
          CONCOURSE_GITHUB_CLIENT_SECRET: "{{ gh_client_secret }}"
          CONCOURSE_MAIN_TEAM_GITHUB_USER: "mbellgb"
          CONCOURSE_MAIN_TEAM_ALLOW_ALL_USERS: false
          CONCOURSE_WORKER_GARDEN_NETWORK: true
      notify:
        - restart nginx
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
